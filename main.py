import asyncio
import logging
import datetime
import calendar
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, KeyboardButton, Message, ReplyKeyboardMarkup
from aiogram.utils.markdown import hbold

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = "8396016774:AAE09_ALathLnzkKHQf7AqbPL4_m39wgBlY"

OWNER_ID = 104653853  # –∂—ë—Å—Ç–∫–æ —Ç–≤–æ–π ID
ADMIN_IDS = [104653853, 1155243378]  # —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –∫–æ–¥–µ

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# ================== –ö–ù–û–ü–ö–ò ==================
user_buttons = [
    [KeyboardButton(text="–ù–∞—á–∞–ª üè≠"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–ª üè°")],
    [KeyboardButton(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
]

admin_buttons = user_buttons + [
    [KeyboardButton(text="–û—Ç—á–µ—Ç üìà"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")]
]

# ================== –î–ê–ù–ù–´–ï ==================
shift_data = {}  # user_id: {"start": datetime, "end": datetime, "comment": str}

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ==================
def is_weekend(date: datetime.date):
    return calendar.weekday(date.year, date.month, date.day) >= 5

def format_status(user_id):
    data = shift_data.get(user_id)
    if not data:
        return "–°–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞."
    start = data.get("start")
    end = data.get("end")
    return f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤: {start.strftime('%H:%M') if start else '‚Äî'}\n–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤: {end.strftime('%H:%M') if end else '‚Äî'}"

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# ================== –•–ï–ù–î–õ–ï–†–´ ==================
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=admin_buttons if is_admin(message.from_user.id) else user_buttons,
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboard)

@router.message(F.text == "–ù–∞—á–∞–ª üè≠")
async def handle_start(message: Message):
    user_id = message.from_user.id
    now = datetime.datetime.now()
    shift = shift_data.setdefault(user_id, {})

    if shift.get("start") and shift.get("end") is None:
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é.")
        return

    shift["start"] = now
    shift["end"] = None

    if is_weekend(now.date()):
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, —É–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:")
    elif now.time() < datetime.time(8, 0):
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ —Ä–∞–Ω—å—à–µ 08:00. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –Ω–∞—á–∞–ª–∞:")
    elif now.time() > datetime.time(8, 10):
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –ø–æ–∑–∂–µ 08:10. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:")
    else:
        await message.answer("–ñ–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!")

@router.message(F.text == "–ó–∞–∫–æ–Ω—á–∏–ª üè°")
async def handle_end(message: Message):
    user_id = message.from_user.id
    now = datetime.datetime.now()
    shift = shift_data.get(user_id)

    if not shift or not shift.get("start"):
        await message.answer("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.")
        return

    if shift.get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    shift["end"] = now

    if now.time() < datetime.time(17, 30):
        await message.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–Ω—å—à–µ 17:30. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
    elif now.time() > datetime.time(17, 40):
        await message.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∑–∂–µ. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:")
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ñ–µ–ª–∞—é –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!")

@router.message(F.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def handle_my_status(message: Message):
    await message.answer(format_status(message.from_user.id))

@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def handle_instructions(message: Message):
    await message.answer("–ù–∞–∂–∏–º–∞–π '–ù–∞—á–∞–ª üè≠' –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∏ '–ó–∞–∫–æ–Ω—á–∏–ª üè°' –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é. –í –≤—ã—Ö–æ–¥–Ω—ã–µ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É.")

@router.message(F.text == "–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")
async def handle_shift_status(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    report = "\n".join(
        f"{user_id}: –Ω–∞—á–∞—Ç–∞ –≤ {data.get('start').strftime('%H:%M') if data.get('start') else '‚Äî'}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {data.get('end').strftime('%H:%M') if data.get('end') else '‚Äî'}"
        for user_id, data in shift_data.items()
    )
    await message.answer(report or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.")

@router.message(F.text == "–û—Ç—á–µ—Ç üìà")
async def handle_report(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@router.message()
async def handle_comment(message: Message):
    user_id = message.from_user.id
    shift = shift_data.get(user_id)
    if not shift:
        return
    if "comment" not in shift and not shift.get("end"):
        shift["comment"] = message.text
        await message.answer("–°–ø–∞—Å–∏–±–æ! –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!")
    elif shift.get("end") and shift.get("comment_done") is not True:
        shift["comment_done"] = True
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!")

# ================== –°–¢–ê–†–¢ ==================
async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    ])
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
