# main.py
import os
import asyncio
import logging
import datetime
import calendar
from typing import Dict, Any

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram.types import (
    BotCommand,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

# ======== –∫–æ–Ω—Ñ–∏–≥ ========
TOKEN = os.getenv("BOT_TOKEN")  # –ß–ò–¢–ê–ï–ú –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_IDS = [123456789]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID

if not TOKEN:
    raise RuntimeError(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. "
        "–°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤ Railway ‚Üí Settings ‚Üí Variables."
    )

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ======== –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ========
user_buttons = [
    [KeyboardButton(text="–ù–∞—á–∞–ª üè≠"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–ª üè°")],
    [KeyboardButton(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
]
admin_buttons = user_buttons + [
    [KeyboardButton(text="–û—Ç—á–µ—Ç üìà"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")]
]

# ======== –¥–∞–Ω–Ω—ã–µ ========
shift_data: Dict[int, Dict[str, Any]] = {}

def is_weekend(date: datetime.date) -> bool:
    return calendar.weekday(date.year, date.month, date.day) >= 5

def format_status(user_id: int) -> str:
    data = shift_data.get(user_id)
    if not data:
        return "–°–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞."
    start = data.get("start")
    end = data.get("end")
    out = [
        f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤: {start.strftime('%H:%M') if start else '‚Äî'}",
        f"–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤: {end.strftime('%H:%M') if end else '‚Äî'}",
    ]
    if data.get("start_reason"):
        out.append(f"–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∞–ª–∞: {data['start_reason']}")
    if data.get("end_reason"):
        out.append(f"–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {data['end_reason']}")
    return "\n".join(out)

def kb(user_id: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=admin_buttons if user_id in ADMIN_IDS else user_buttons,
        resize_keyboard=True
    )

# ======== —Ö–µ–Ω–¥–ª–µ—Ä—ã ========
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb(message.from_user.id))

@router.message(F.text == "–ù–∞—á–∞–ª üè≠")
async def handle_start(message: Message):
    uid = message.from_user.id
    now = datetime.datetime.now()
    data = shift_data.setdefault(uid, {})
    if data.get("start") and not data.get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é.")
        return
    data.update({
        "start": now,
        "end": None,
        "start_reason": None,
        "end_reason": None,
        "need_start_reason": False,
        "need_end_reason": False,
    })

    need = False
    if is_weekend(now.date()):
        need = True
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:")
    elif now.time() < datetime.time(8, 0):
        need = True
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ —Ä–∞–Ω—å—à–µ 08:00. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –Ω–∞—á–∞–ª–∞:")
    elif now.time() > datetime.time(8, 10):
        need = True
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –ø–æ–∑–∂–µ 08:10. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:")
    else:
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!")
    data["need_start_reason"] = need

@router.message(F.text == "–ó–∞–∫–æ–Ω—á–∏–ª üè°")
async def handle_end(message: Message):
    uid = message.from_user.id
    now = datetime.datetime.now()
    data = shift_data.get(uid)
    if not data or not data.get("start"):
        await message.answer("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.")
        return
    if data.get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    data["end"] = now
    need = False
    if now.time() < datetime.time(17, 30):
        need = True
        await message.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–Ω—å—à–µ 17:30. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
    elif now.time() > datetime.time(17, 40):
        need = True
        await message.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∑–∂–µ. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:")
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!")
    data["need_end_reason"] = need

@router.message(F.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def handle_status(message: Message):
    await message.answer(format_status(message.from_user.id))

@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def handle_help(message: Message):
    await message.answer(
        "–ù–∞–∂–∏–º–∞–π ¬´–ù–∞—á–∞–ª üè≠¬ª –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∏ ¬´–ó–∞–∫–æ–Ω—á–∏–ª üè°¬ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é.\n"
        "–í –≤—ã—Ö–æ–¥–Ω—ã–µ –∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É."
    )

@router.message(F.text == "–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")
async def handle_shift_status(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not shift_data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.")
        return
    lines = []
    for uid, data in shift_data.items():
        s = data.get("start").strftime("%H:%M") if data.get("start") else "‚Äî"
        e = data.get("end").strftime("%H:%M") if data.get("end") else "‚Äî"
        lines.append(f"{uid}: –Ω–∞—á–∞—Ç–∞ –≤ {s}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {e}")
    await message.answer("\n".join(lines))

@router.message(F.text == "–û—Ç—á–µ—Ç üìà")
async def handle_report(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –∫–æ–º–º–µ–Ω—Ç/–ø—Ä–∏—á–∏–Ω–∞
@router.message(F.text)
async def handle_comment(message: Message):
    uid = message.from_user.id
    data = shift_data.get(uid)
    if not data:
        return
    if data.get("need_start_reason") and not data.get("start_reason"):
        data["start_reason"] = message.text.strip()
        data["need_start_reason"] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ! –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!")
        return
    if data.get("need_end_reason") and not data.get("end_reason"):
        data["end_reason"] = message.text.strip()
        data["need_end_reason"] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!")
        return

async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.set_my_commands([BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
