import asyncio
import logging
import os
import json
import pandas as pd
from datetime import datetime, time
import pytz
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.exceptions import TelegramBadRequest
from aiogram.types.input_file import FSInputFile

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '8369016774:AAE09_ALathLnzKdHQF7qAbpL4_mJ9wg8IY'  # ‚Üê –≤–∞—à —Ç–æ–∫–µ–Ω, –Ω–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –µ–≥–æ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ
ADMIN_IDS = [104653853]  # ‚Üê –≤–∞—à Telegram user_id
DATA_FILE = 'data.json'
TZ = pytz.timezone('Europe/Moscow')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher()
data = {}

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def load_data():
    global data
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            raw = json.load(f)
            data.clear()
            for k, v in raw.items():
                data[str(k)] = {
                    'name': v.get('name'),
                    'start': datetime.fromisoformat(v['start']) if v.get('start') else None,
                    'end': datetime.fromisoformat(v['end']) if v.get('end') else None
                }
    except FileNotFoundError:
        data.clear()

def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        serializable = {
            uid: {
                'name': v['name'],
                'start': v['start'].isoformat() if v.get('start') else None,
                'end': v['end'].isoformat() if v.get('end') else None
            } for uid, v in data.items()
        }
        json.dump(serializable, f, ensure_ascii=False, indent=2)

def is_admin(user_id):
    return user_id in ADMIN_IDS

def get_keyboard(is_admin=False):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(text="–ù–∞—á–∞–ª üè≠"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–ª üè°"))
    kb.add(KeyboardButton(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìñ"))
    if is_admin:
        kb.add(KeyboardButton(text="–°—Ç–∞—Ç—É—Åüìç"), KeyboardButton(text="–û—Ç—á–µ—Ç üìà"))
    return kb

def within_working_hours():
    now = datetime.now(TZ).time()
    return time(7, 0) <= now <= time(17, 30)

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(CommandStart())
async def on_start(message: Message):
    load_data()
    await message.answer("–ñ–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!", reply_markup=get_keyboard(is_admin(message.from_user.id)))

@dp.message(lambda m: m.text.startswith("–ù–∞—á–∞–ª"))
async def handle_start_shift(message: Message):
    user_id = str(message.from_user.id)
    now = datetime.now(TZ)
    if not within_working_hours():
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –°–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Å 07:00 –¥–æ 17:30 –ø–æ –ú–°–ö.")
        return
    shift = data.get(user_id, {})
    if shift.get('start'):
        await message.answer(f"–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞ –≤ {shift['start'].strftime('%H:%M')}.")
    else:
        data[user_id] = {'name': message.from_user.full_name, 'start': now, 'end': None}
        save_data()
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ñ–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!")

@dp.message(lambda m: m.text.startswith("–ó–∞–∫–æ–Ω—á–∏–ª"))
async def handle_end_shift(message: Message):
    user_id = str(message.from_user.id)
    now = datetime.now(TZ)
    shift = data.get(user_id)
    if not shift or not shift.get('start'):
        await message.answer("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.")
        return
    if shift.get('end'):
        await message.answer(f"–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {shift['end'].strftime('%H:%M')}.")
    else:
        data[user_id]['end'] = now
        save_data()
        await message.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! –ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!")

@dp.message(lambda m: m.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def handle_my_status(message: Message):
    user_id = str(message.from_user.id)
    shift = data.get(user_id)
    if not shift:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Å–º–µ–Ω—É.")
    elif shift.get('end'):
        await message.answer(f"–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {shift['end'].strftime('%H:%M')}.")
    elif shift.get('start'):
        await message.answer(f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤ {shift['start'].strftime('%H:%M')}, –≤—ã –Ω–∞ —Å–º–µ–Ω–µ.")
    else:
        await message.answer("–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")

@dp.message(lambda m: m.text.startswith("–°—Ç–∞—Ç—É—Å") and is_admin(m.from_user.id))
async def handle_admin_status(message: Message):
    now = datetime.now(TZ).date()
    report = []
    for uid, shift in data.items():
        name = shift['name']
        start = shift.get('start')
        end = shift.get('end')
        if start and start.date() == now:
            if end:
                report.append(f"{name}: –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É –≤ {end.strftime('%H:%M')}")
            else:
                report.append(f"{name}: –Ω–∞ —Å–º–µ–Ω–µ —Å {start.strftime('%H:%M')}")
        else:
            report.append(f"{name}: –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ")
    await message.answer("\n".join(report) if report else "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.")

@dp.message(lambda m: m.text.startswith("–û—Ç—á–µ—Ç") and is_admin(m.from_user.id))
async def handle_report(message: Message):
    rows = []
    for uid, shift in data.items():
        rows.append({
            '–ò–º—è': shift.get('name', ''),
            '–ù–∞—á–∞–ª–æ': shift.get('start').strftime('%Y-%m-%d %H:%M') if shift.get('start') else '',
            '–û–∫–æ–Ω—á–∞–Ω–∏–µ': shift.get('end').strftime('%Y-%m-%d %H:%M') if shift.get('end') else ''
        })
    df = pd.DataFrame(rows)
    file_name = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    df.to_excel(file_name, index=False)
    await message.answer_document(FSInputFile(file_name))
    os.remove(file_name)

@dp.message(lambda m: m.text.startswith("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
async def handle_instructions(message: Message):
    text = (
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n"
        "–ù–∞—á–∞–ª üè≠ ‚Äî –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã\n"
        "–ó–∞–∫–æ–Ω—á–∏–ª üè° ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã\n"
        "–ú–æ–π —Å—Ç–∞—Ç—É—Å ‚Äî –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìñ ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        "–°—Ç–∞—Ç—É—Åüìç ‚Äî —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        "–û—Ç—á–µ—Ç üìà ‚Äî –æ—Ç—á—ë—Ç –≤ Excel –ø–æ —Å–º–µ–Ω–∞–º"
    )
    await message.answer(text)

@dp.message()
async def fallback(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")

async def main():
    load_data()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
