# main.py
import os
import re
import asyncio
import logging
import datetime
import calendar
from typing import Dict, Any, Set

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from aiogram.types import BotCommand, KeyboardButton, Message, ReplyKeyboardMarkup

# ----- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É
logging.basicConfig(level=logging.INFO)

# ====================== ENV utils ======================
def clean_env_value(value: str | None) -> str:
    if not value:
        return ""
    return (
        value.replace("\u00A0", " ")  # NBSP -> space
             .replace("\r", " ")
             .replace("\n", " ")
             .strip()
             .strip('"')
             .strip("'")
             .strip()
    )

def parse_admin_ids(env_value: str | None) -> Set[int]:
    cleaned = clean_env_value(env_value)
    if not cleaned:
        return set()
    parts = re.split(r"[,\s;]+", cleaned)
    out: Set[int] = set()
    for p in parts:
        if not p:
            continue
        m = re.search(r"-?\d+", p)
        if not m:
            logging.warning("ADMIN_IDS: –ø—Ä–æ–ø—É—Å–∫–∞—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç %r", p)
            continue
        out.add(int(m.group(0)))
    return out

# ====================== ENV read (—É—Å—Ç–æ–π—á–∏–≤—ã–π) ======================
RAW_BOT_TOKEN = os.getenv("BOT_TOKEN", "")
RAW_OWNER_ID  = os.getenv("OWNER_ID", "")
RAW_ADMIN_IDS = os.getenv("ADMIN_IDS", "")
OWNER_SECRET  = clean_env_value(os.getenv("OWNER_SECRET"))

TOKEN = clean_env_value(RAW_BOT_TOKEN)
if not TOKEN:
    raise RuntimeError(f"BOT_TOKEN –ø—É—Å—Ç. RAW={RAW_BOT_TOKEN!r}")

ADMIN_IDS: Set[int] = parse_admin_ids(RAW_ADMIN_IDS)

owner_clean = clean_env_value(RAW_OWNER_ID)
OWNER_ID = None
if owner_clean:
    try:
        OWNER_ID = int(owner_clean)
    except ValueError:
        OWNER_ID = None

# fallback: –µ—Å–ª–∏ OWNER_ID –ø—É—Å—Ç, –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –∏–∑ ADMIN_IDS
if OWNER_ID is None:
    if ADMIN_IDS:
        OWNER_ID = sorted(ADMIN_IDS)[0]
        logging.warning("OWNER_ID –Ω–µ –∑–∞–¥–∞–Ω/–Ω–µ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤–æ–≥–æ –∏–∑ ADMIN_IDS: %s", OWNER_ID)
    else:
        raise RuntimeError(
            f"OWNER_ID –Ω–µ –∑–∞–¥–∞–Ω –∏ ADMIN_IDS –ø—É—Å—Ç. RAW_OWNER_ID={RAW_OWNER_ID!r}, RAW_ADMIN_IDS={RAW_ADMIN_IDS!r}"
        )

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ENV
logging.info("RAW OWNER_ID: %r | CLEAN: %r | USED: %s", RAW_OWNER_ID, owner_clean, OWNER_ID)
logging.info("RAW ADMIN_IDS: %r | PARSED: %s", RAW_ADMIN_IDS, sorted(ADMIN_IDS))

# ====================== Bot / DP ======================
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# ====================== Keyboards / roles ======================
user_buttons = [
    [KeyboardButton(text="–ù–∞—á–∞–ª üè≠"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–ª üè°")],
    [KeyboardButton(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
]
admin_buttons = user_buttons + [[KeyboardButton(text="–û—Ç—á–µ—Ç üìà"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")]]

def is_admin(user_id: int) -> bool:
    return user_id == OWNER_ID or user_id in ADMIN_IDS

def kb(user_id: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=admin_buttons if is_admin(user_id) else user_buttons,
        resize_keyboard=True
    )

# ====================== In-memory data ======================
shift_data: Dict[int, Dict[str, Any]] = {}

def is_weekend(date: datetime.date) -> bool:
    return calendar.weekday(date.year, date.month, date.day) >= 5  # 5-6 = Sat/Sun

def format_status(user_id: int) -> str:
    data = shift_data.get(user_id)
    if not data:
        return "–°–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞."
    start = data.get("start"); end = data.get("end")
    lines = [
        f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤: {start.strftime('%H:%M') if start else '‚Äî'}",
        f"–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤: {end.strftime('%H:%M') if end else '‚Äî'}",
    ]
    if data.get("start_reason"): lines.append(f"–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∞–ª–∞: {data['start_reason']}")
    if data.get("end_reason"):   lines.append(f"–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {data['end_reason']}")
    return "\n".join(lines)

# ====================== Commands (service / owner) ======================
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb(message.from_user.id))

@router.message(Command("myid"))
async def cmd_myid(message: Message):
    uid = message.from_user.id
    listed = ", ".join(map(str, sorted(ADMIN_IDS))) or "‚Äî"
    await message.answer(
        f"–¢–≤–æ–π ID: <code>{uid}</code>\n"
        f"OWNER_ID: <code>{OWNER_ID}</code>\n"
        f"–ê–¥–º–∏–Ω: {'–¥–∞' if is_admin(uid) else '–Ω–µ—Ç'}\n"
        f"–ê–¥–º–∏–Ω—ã (–±–µ–∑ owner): <code>{listed}</code>",
        reply_markup=kb(uid)
    )

@router.message(Command("admins"))
async def cmd_admins(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id)); return
    listed = ", ".join(map(str, sorted(ADMIN_IDS))) or "‚Äî"
    await message.answer(f"OWNER: <code>{OWNER_ID}</code>\n–ê–¥–º–∏–Ω—ã: <code>{listed}</code>", reply_markup=kb(message.from_user.id))

@router.message(Command("admin_add"))
async def cmd_admin_add(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.", reply_markup=kb(message.from_user.id)); return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /admin_add <id>", reply_markup=kb(message.from_user.id)); return
    try:
        new_id = int(parts[1].strip())
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=kb(message.from_user.id)); return
    if new_id == OWNER_ID:
        await message.answer("–í–ª–∞–¥–µ–ª–µ—Ü –∏ —Ç–∞–∫ –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞.", reply_markup=kb(message.from_user.id)); return
    if new_id in ADMIN_IDS:
        await message.answer("–≠—Ç–æ—Ç ID —É–∂–µ –∞–¥–º–∏–Ω.", reply_markup=kb(message.from_user.id)); return
    ADMIN_IDS.add(new_id)
    listed = ", ".join(map(str, sorted(ADMIN_IDS)))
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: <code>{new_id}</code>\n"
        f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: <code>{listed}</code>\n"
        "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ –≤ Railway ‚Üí ADMIN_IDS –∏ Redeploy.",
        reply_markup=kb(message.from_user.id)
    )

@router.message(Command("admin_remove"))
async def cmd_admin_remove(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.", reply_markup=kb(message.from_user.id)); return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /admin_remove <id>", reply_markup=kb(message.from_user.id)); return
    try:
        rem_id = int(parts[1].strip())
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=kb(message.from_user.id)); return
    if rem_id == OWNER_ID:
        await message.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.", reply_markup=kb(message.from_user.id)); return
    if rem_id not in ADMIN_IDS:
        await message.answer("–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç.", reply_markup=kb(message.from_user.id)); return
    ADMIN_IDS.remove(rem_id)
    listed = ", ".join(map(str, sorted(ADMIN_IDS))) or "‚Äî"
    await message.answer(f"–£–¥–∞–ª—ë–Ω: <code>{rem_id}</code>\n–¢–µ–∫—É—â–∏–µ: <code>{listed}</code>\n‚ö†Ô∏è –û–±–Ω–æ–≤–∏ Railway ‚Üí ADMIN_IDS –∏ Redeploy.", reply_markup=kb(message.from_user.id))

@router.message(Command("refresh"))
async def cmd_refresh(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ ENV.", reply_markup=kb(message.from_user.id)); return
    global ADMIN_IDS, RAW_ADMIN_IDS
    RAW_ADMIN_IDS = os.getenv("ADMIN_IDS", "")
    ADMIN_IDS = parse_admin_ids(RAW_ADMIN_IDS)
    listed = ", ".join(map(str, sorted(ADMIN_IDS))) or "‚Äî"
    await message.answer(f"–ü–µ—Ä–µ—á–∏—Ç–∞–ª ADMIN_IDS. –°–µ–π—á–∞—Å: <code>{listed}</code>", reply_markup=kb(message.from_user.id))

@router.message(Command("setowner"))
async def cmd_setowner(message: Message):
    """
    /setowner <—Å–µ–∫—Ä–µ—Ç> <id> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ –ª–µ—Ç—É (–µ—Å–ª–∏ OWNER_SECRET –∑–∞–¥–∞–Ω).
    –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ENV –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–µ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª—Å—è, –Ω–æ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.
    """
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /setowner <—Å–µ–∫—Ä–µ—Ç> <id>", reply_markup=kb(message.from_user.id)); return
    secret, id_str = parts[1], parts[2]
    if not OWNER_SECRET:
        await message.answer("OWNER_SECRET –Ω–µ –∑–∞–¥–∞–Ω –≤ ENV.", reply_markup=kb(message.from_user.id)); return
    if secret != OWNER_SECRET:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç.", reply_markup=kb(message.from_user.id)); return
    try:
        new_owner = int(id_str)
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=kb(message.from_user.id)); return
    global OWNER_ID
    OWNER_ID = new_owner
    await message.answer(
        f"–í–ª–∞–¥–µ–ª–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{OWNER_ID}</code>\n"
        f"–ó–∞–ø–∏—à–∏ –µ–≥–æ –≤ Railway ‚Üí OWNER_ID –∏ Redeploy.",
        reply_markup=kb(message.from_user.id)
    )

# ====================== Business ======================
@router.message(F.text == "–ù–∞—á–∞–ª üè≠")
async def handle_start(message: Message):
    uid = message.from_user.id
    now = datetime.datetime.now()
    data = shift_data.setdefault(uid, {})
    if data.get("start") and not data.get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—É—â—É—é.", reply_markup=kb(uid)); return
    data.update({
        "start": now, "end": None,
        "start_reason": None, "end_reason": None,
        "need_start_reason": False, "need_end_reason": False,
    })
    if is_weekend(now.date()):
        data["need_start_reason"] = True; txt = "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:"
    elif now.time() < datetime.time(8, 0):
        data["need_start_reason"] = True; txt = "–†–∞–Ω—å—à–µ 08:00. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –Ω–∞—á–∞–ª–∞:"
    elif now.time() > datetime.time(8, 10):
        data["need_start_reason"] = True; txt = "–ü–æ–∑–∂–µ 08:10. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:"
    else:
        txt = "–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!"
    await message.answer(txt, reply_markup=kb(uid))

@router.message(F.text == "–ó–∞–∫–æ–Ω—á–∏–ª üè°")
async def handle_end(message: Message):
    uid = message.from_user.id
    now = datetime.datetime.now()
    data = shift_data.get(uid)
    if not data or not data.get("start"):
        await message.answer("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=kb(uid)); return
    if data.get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=kb(uid)); return
    data["end"] = now
    if now.time() < datetime.time(17, 30):
        data["need_end_reason"] = True; txt = "–†–∞–Ω—å—à–µ 17:30. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:"
    elif now.time() > datetime.time(17, 40):
        data["need_end_reason"] = True; txt = "–ü–æ–∑–∂–µ –Ω–æ—Ä–º—ã. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:"
    else:
        data["need_end_reason"] = False; txt = "–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!"
    await message.answer(txt, reply_markup=kb(uid))

@router.message(F.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def handle_status(message: Message):
    await message.answer(format_status(message.from_user.id), reply_markup=kb(message.from_user.id))

@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def handle_help(message: Message):
    await message.answer(
        "–ù–∞–∂–∏–º–∞–π ¬´–ù–∞—á–∞–ª üè≠¬ª –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∏ ¬´–ó–∞–∫–æ–Ω—á–∏–ª üè°¬ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é.\n"
        "–í –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —É–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
        reply_markup=kb(message.from_user.id)
    )

@router.message(F.text == "–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")
async def handle_shift_status(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id)); return
    if not shift_data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.", reply_markup=kb(message.from_user.id)); return
    lines = []
    for uid, data in shift_data.items():
        s = data.get("start").strftime("%H:%M") if data.get("start") else "‚Äî"
        e = data.get("end").strftime("%H:%M") if data.get("end") else "‚Äî"
        lines.append(f"{uid}: –Ω–∞—á–∞—Ç–∞ –≤ {s}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {e}")
    await message.answer("\n".join(lines), reply_markup=kb(message.from_user.id))

@router.message(F.text == "–û—Ç—á–µ—Ç üìà")
async def handle_report(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id)); return
    # TODO: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (CSV/Excel/—Ç–µ–∫—Å—Ç)
    await message.answer("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=kb(message.from_user.id))

# –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ / –ø—Ä–∏—á–∏–Ω—ã (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
@router.message(F.text)
async def handle_comment(message: Message):
    uid = message.from_user.id
    data = shift_data.get(uid)
    if not data:
        return
    if data.get("need_start_reason") and not data.get("start_reason"):
        data["start_reason"] = message.text.strip()
        data["need_start_reason"] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ! –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!", reply_markup=kb(uid))
        return
    if data.get("need_end_reason") and not data.get("end_reason"):
        data["end_reason"] = message.text.strip()
        data["need_end_reason"] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=kb(uid))

# ====================== Entry ======================
async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="myid", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID –∏ —Å—Ç–∞—Ç—É—Å"),
        BotCommand(command="admins", description="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"),
        BotCommand(command="admin_add", description="(OWNER) –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞: /admin_add <id>"),
        BotCommand(command="admin_remove", description="(OWNER) –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞: /admin_remove <id>"),
        BotCommand(command="refresh", description="(OWNER) –ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å ADMIN_IDS –∏–∑ ENV"),
        BotCommand(command="setowner", description="–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞: /setowner <—Å–µ–∫—Ä–µ—Ç> <id>"),
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
