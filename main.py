from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta
import pandas as pd
import os
import asyncio

API_TOKEN = 'YOUR_TOKEN_HERE'
ADMIN_ID = 123456789

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class ShiftStates(StatesGroup):
    WaitingForReason = State()

users_data = {}

main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(
    KeyboardButton("–ù–∞—á–∞–ª üè≠"), KeyboardButton("–ó–∞–∫–æ–Ω—á–∏–ª üè°")
)
main_keyboard.add(
    KeyboardButton("–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
)

admin_keyboard = main_keyboard.add(KeyboardButton("–û—Ç—á–µ—Ç üìà"), KeyboardButton("–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã"))

# –§—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è

def is_working_day():
    return datetime.today().weekday() < 5  # 0=Monday, ..., 6=Sunday

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã, —Ä–∞–Ω–Ω–µ–µ/–ø–æ–∑–¥–Ω–µ–µ

def get_shift_status():
    lines = []
    for user_id, data in users_data.items():
        username = data.get("username", str(user_id))
        start = data.get("start", "‚Äî")
        end = data.get("end", "‚Äî")
        lines.append(f"{username}:\n–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤: {start}\n–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤: {end}\n")
    return "\n".join(lines)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω.", reply_markup=admin_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É—á—ë—Ç–∞ —Å–º–µ–Ω—ã.", reply_markup=main_keyboard)

@dp.message_handler(Text(equals="–ù–∞—á–∞–ª üè≠"))
async def shift_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    now = datetime.now()
    weekday = now.weekday()
    time_now = now.strftime("%H:%M")
    
    if user_id not in users_data:
        users_data[user_id] = {"username": message.from_user.full_name, "start": None, "end": None}

    if users_data[user_id].get("start") and not users_data[user_id].get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞.")
        return

    # –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
    if weekday >= 5:
        await state.set_state(ShiftStates.WaitingForReason.state)
        await state.update_data(reason_type="weekend_start")
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, —É–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:")
        return

    if now.time() < datetime.strptime("08:00", "%H:%M").time():
        await state.set_state(ShiftStates.WaitingForReason.state)
        await state.update_data(reason_type="early_start")
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ —Ä–∞–Ω—å—à–µ 08:00. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É:")
        return

    if now.time() > datetime.strptime("08:10", "%H:%M").time():
        await state.set_state(ShiftStates.WaitingForReason.state)
        await state.update_data(reason_type="late_start")
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –ø–æ–∑–∂–µ 08:10. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:")
        return

    users_data[user_id]["start"] = time_now
    users_data[user_id]["end"] = None
    await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ñ–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!")

@dp.message_handler(Text(equals="–ó–∞–∫–æ–Ω—á–∏–ª üè°"))
async def shift_end(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    now = datetime.now()
    time_now = now.strftime("%H:%M")

    if user_id not in users_data or not users_data[user_id].get("start"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ '–ù–∞—á–∞–ª üè≠'")
        return

    if users_data[user_id].get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    if now.time() < datetime.strptime("17:30", "%H:%M").time():
        await state.set_state(ShiftStates.WaitingForReason.state)
        await state.update_data(reason_type="early_end")
        await message.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–Ω—å—à–µ. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É:")
        return

    if now.time() > datetime.strptime("17:40", "%H:%M").time():
        await state.set_state(ShiftStates.WaitingForReason.state)
        await state.update_data(reason_type="late_end")
        await message.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∑–∂–µ. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:")
        return

    users_data[user_id]["end"] = time_now
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!")

@dp.message_handler(Text(equals="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
async def send_instruction(message: types.Message):
    await message.answer("üìå –ù–∞–∂–º–∏ '–ù–∞—á–∞–ª üè≠' –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∏ '–ó–∞–∫–æ–Ω—á–∏–ª üè°' –≤ –∫–æ–Ω—Ü–µ. –ï—Å–ª–∏ –æ–ø–∞–∑–¥—ã–≤–∞–µ—à—å, —Ä–∞–Ω—å—à–µ –Ω–∞—á–∏–Ω–∞–µ—à—å –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å ‚Äî —É–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É.")

@dp.message_handler(Text(equals="–ú–æ–π —Å—Ç–∞—Ç—É—Å"))
async def my_status(message: types.Message):
    user_id = message.from_user.id
    data = users_data.get(user_id)
    if not data:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞–ª üè≠' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.")
    else:
        await message.answer(f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞: {data.get('start', '‚Äî')}\n–ó–∞–≤–µ—Ä—à–µ–Ω–∞: {data.get('end', '‚Äî')}")

@dp.message_handler(Text(equals="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã"))
async def status_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer(get_shift_status())

@dp.message_handler(state=ShiftStates.WaitingForReason)
async def handle_reason(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    reason_type = data.get("reason_type")
    now = datetime.now().strftime("%H:%M")

    if user_id not in users_data:
        users_data[user_id] = {"username": message.from_user.full_name}

    if reason_type in ["early_start", "late_start", "weekend_start"]:
        users_data[user_id]["start"] = now
        users_data[user_id]["end"] = None
        await message.answer("–°–ø–∞—Å–∏–±–æ, —Å–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!")

    elif reason_type in ["early_end", "late_end"]:
        users_data[user_id]["end"] = now
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!")

    await state.finish()

async def scheduled_reminders():
    while True:
        now = datetime.now()
        if now.strftime("%H:%M") == "08:00" and is_working_day():
            await bot.send_message(ADMIN_ID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞–ª üè≠'")
        if now.strftime("%H:%M") == "17:30" and is_working_day():
            await bot.send_message(ADMIN_ID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å '–ó–∞–∫–æ–Ω—á–∏–ª üè°'")
        await asyncio.sleep(60)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled_reminders())
    executor.start_polling(dp, skip_updates=True)
