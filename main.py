import os
import asyncio
import logging
import datetime
import calendar
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from aiogram.types import BotCommand, KeyboardButton, Message, ReplyKeyboardMarkup

# ========== –∫–æ–Ω—Ñ–∏–≥ ==========
def parse_admin_ids(env_value: str | None) -> List[int]:
    if not env_value:
        return []
    ids: List[int] = []
    for part in env_value.split(","):
        part = part.strip()
        if not part:
            continue
        try:
            ids.append(int(part))
        except ValueError:
            logging.warning("ADMIN_IDS: –ø—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ %r", part)
    return ids

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. Railway ‚Üí Settings ‚Üí Variables.")

ADMIN_IDS: List[int] = parse_admin_ids(os.getenv("ADMIN_IDS"))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ========== –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========
user_buttons = [
    [KeyboardButton(text="–ù–∞—á–∞–ª üè≠"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–ª üè°")],
    [KeyboardButton(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
]
admin_buttons = user_buttons + [
    [KeyboardButton(text="–û—Ç—á–µ—Ç üìà"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")]
]

def kb(user_id: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=admin_buttons if user_id in ADMIN_IDS else user_buttons,
        resize_keyboard=True
    )

# ========== –¥–∞–Ω–Ω—ã–µ ==========
shift_data: Dict[int, Dict[str, Any]] = {}
# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
# {
#   "start": datetime | None,
#   "end": datetime | None,
#   "start_reason": str | None,
#   "end_reason": str | None,
#   "need_start_reason": bool,
#   "need_end_reason": bool,
# }

def is_weekend(date: datetime.date) -> bool:
    return calendar.weekday(date.year, date.month, date.day) >= 5

def format_status(user_id: int) -> str:
    data = shift_data.get(user_id)
    if not data:
        return "–°–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞."
    start = data.get("start")
    end = data.get("end")
    out = [
        f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤: {start.strftime('%H:%M') if start else '‚Äî'}",
        f"–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤: {end.strftime('%H:%M') if end else '‚Äî'}",
    ]
    if data.get("start_reason"):
        out.append(f"–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∞–ª–∞: {data['start_reason']}")
    if data.get("end_reason"):
        out.append(f"–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {data['end_reason']}")
    return "\n".join(out)

# ========== —Ö–µ–Ω–¥–ª–µ—Ä—ã ==========
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb(message.from_user.id))

@router.message(Command("myid"))
async def cmd_myid(message: Message):
    await message.answer(
        f"–¢–≤–æ–π Telegram ID: <code>{message.from_user.id}</code>\n"
        f"–ê–¥–º–∏–Ω: {'–¥–∞' if message.from_user.id in ADMIN_IDS else '–Ω–µ—Ç'}",
        reply_markup=kb(message.from_user.id)
    )

@router.message(Command("refresh"))
async def cmd_refresh(message: Message):
    """–ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å ADMIN_IDS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞."""
    global ADMIN_IDS
    ADMIN_IDS = parse_admin_ids(os.getenv("ADMIN_IDS"))
    await message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb(message.from_user.id))

@router.message(F.text == "–ù–∞—á–∞–ª üè≠")
async def handle_start(message: Message):
    uid = message.from_user.id
    now = datetime.datetime.now()
    data = shift_data.setdefault(uid, {})
    if data.get("start") and not data.get("end"):
        await message.answer(
            "–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é.",
            reply_markup=kb(uid)
        )
        return

    data.update({
        "start": now,
        "end": None,
        "start_reason": None,
        "end_reason": None,
        "need_start_reason": False,
        "need_end_reason": False,
    })

    need = False
    if is_weekend(now.date()):
        need = True
        txt = "–°–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:"
    elif now.time() < datetime.time(8, 0):
        need = True
        txt = "–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ —Ä–∞–Ω—å—à–µ 08:00. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –Ω–∞—á–∞–ª–∞:"
    elif now.time() > datetime.time(8, 10):
        need = True
        txt = "–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –ø–æ–∑–∂–µ 08:10. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:"
    else:
        txt = "–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!"

    data["need_start_reason"] = need
    await message.answer(txt, reply_markup=kb(uid))

@router.message(F.text == "–ó–∞–∫–æ–Ω—á–∏–ª üè°")
async def handle_end(message: Message):
    uid = message.from_user.id
    now = datetime.datetime.now()
    data = shift_data.get(uid)

    if not data or not data.get("start"):
        await message.answer("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=kb(uid))
        return
    if data.get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=kb(uid))
        return

    data["end"] = now
    if now.time() < datetime.time(17, 30):
        data["need_end_reason"] = True
        txt = "–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–Ω—å—à–µ 17:30. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:"
    elif now.time() > datetime.time(17, 40):
        data["need_end_reason"] = True
        txt = "–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∑–∂–µ. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:"
    else:
        data["need_end_reason"] = False
        txt = "–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!"
    await message.answer(txt, reply_markup=kb(uid))

@router.message(F.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def handle_status(message: Message):
    await message.answer(format_status(message.from_user.id), reply_markup=kb(message.from_user.id))

@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def handle_help(message: Message):
    await message.answer(
        "–ù–∞–∂–∏–º–∞–π ¬´–ù–∞—á–∞–ª üè≠¬ª –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∏ ¬´–ó–∞–∫–æ–Ω—á–∏–ª üè°¬ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é.\n"
        "–í –≤—ã—Ö–æ–¥–Ω—ã–µ –∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É.",
        reply_markup=kb(message.from_user.id)
    )

@router.message(F.text == "–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")
async def handle_shift_status(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id))
        return

    if not shift_data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.", reply_markup=kb(message.from_user.id))
        return

    lines = []
    for uid, data in shift_data.items():
        s = data.get("start").strftime("%H:%M") if data.get("start") else "‚Äî"
        e = data.get("end").strftime("%H:%M") if data.get("end") else "‚Äî"
        lines.append(f"{uid}: –Ω–∞—á–∞—Ç–∞ –≤ {s}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {e}")
    await message.answer("\n".join(lines), reply_markup=kb(message.from_user.id))

@router.message(F.text == "–û—Ç—á–µ—Ç üìà")
async def handle_report(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id))
        return
    await message.answer("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=kb(message.from_user.id))

# –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ / –ø—Ä–∏—á–∏–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è)
@router.message(F.text)
async def handle_comment(message: Message):
    uid = message.from_user.id
    data = shift_data.get(uid)
    if not data:
        return
    if data.get("need_start_reason") and not data.get("start_reason"):
        data["start_reason"] = message.text.strip()
        data["need_start_reason"] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ! –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!", reply_markup=kb(uid))
        return
    if data.get("need_end_reason") and not data.get("end_reason"):
        data["end_reason"] = message.text.strip()
        data["need_end_reason"] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=kb(uid))

# ========== —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
async def main():
    logging.basicConfig(level=logging.INFO)
    logging.info("ADMIN_IDS (parsed): %s", ADMIN_IDS)

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="myid", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID"),
        BotCommand(command="refresh", description="–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é"),
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
