# main.py  (aiogram >= 3.7,<3.9)
import os
import io
import asyncio
import logging
import datetime
import calendar
from collections import defaultdict
from typing import Dict, Any, Iterable

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    BotCommand,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    BufferedInputFile,
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from zoneinfo import ZoneInfo

from openpyxl import Workbook
from openpyxl.styles import Alignment, Font
from openpyxl.utils import get_column_letter

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================

# –¢–æ–∫–µ–Ω –∏–∑ ENV
RAW_TOKEN = os.getenv("BOT_TOKEN", "")
BOT_TOKEN = (
    RAW_TOKEN.replace("\u00A0", " ").replace("\r", "").replace("\n", "").strip().strip('"').strip("'")
)
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    raise RuntimeError(f"BOT_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–≤–µ—Ä–Ω–æ. RAW={RAW_TOKEN!r}")

# –†–æ–ª–∏
OWNER_ID  = 104653853
ADMIN_IDS = [104653853, 1155243378]

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ID -> –§–ò–û
EMPLOYEES: Dict[int, str] = {
    104653853: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
    1155243378: "–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á",
    # –¥–æ–±–∞–≤–ª—è–π –∑–¥–µ—Å—å: 123456789: "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ",
}
ALLOWED_IDS = set(EMPLOYEES.keys()) | {OWNER_ID, *ADMIN_IDS}

# –ú–°–ö
MSK = ZoneInfo("Europe/Moscow")

# –ù–æ—Ä–º–∞—Ç–∏–≤—ã (–ú–°–ö)
START_NORM = datetime.time(8, 0)
START_OK_TILL = datetime.time(8, 10)
END_NORM = datetime.time(17, 30)
END_OK_TILL = datetime.time(17, 40)

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# ================== –ö–ù–û–ü–ö–ò ==================
user_buttons = [
    [KeyboardButton(text="–ù–∞—á–∞–ª üè≠"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–ª üè°")],
    [KeyboardButton(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
]
admin_buttons = user_buttons + [[KeyboardButton(text="–û—Ç—á–µ—Ç üìà"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")]]

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS or uid == OWNER_ID

def kb(uid: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=admin_buttons if is_admin(uid) else user_buttons,
        resize_keyboard=True
    )

# ================== –î–ê–ù–ù–´–ï (–ü–û –î–ù–Ø–ú, –ú–°–ö) ==================
# shifts_by_date["YYYY-MM-DD"][user_id] = {...}
shifts_by_date: Dict[str, Dict[int, Dict[str, Any]]] = defaultdict(dict)

def today_key() -> str:
    return datetime.datetime.now(MSK).date().isoformat()

def msk_now() -> datetime.datetime:
    return datetime.datetime.now(MSK)

def fmt_hm(dt: datetime.datetime | None) -> str:
    if not dt:
        return "‚Äî"
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=MSK)
    return dt.astimezone(MSK).strftime("%H:%M")

def is_weekend(date: datetime.date) -> bool:
    return calendar.weekday(date.year, date.month, date.day) >= 5  # 5=–°–±, 6=–í—Å

def ensure_allowed(message: Message) -> bool:
    uid = message.from_user.id
    if uid not in ALLOWED_IDS:
        asyncio.create_task(message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."))
        return False
    return True

def today_shift(uid: int) -> Dict[str, Any]:
    return shifts_by_date[today_key()].setdefault(uid, {})

def fio(uid: int) -> str:
    return EMPLOYEES.get(uid, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({uid})")

# ================== –ö–û–ú–ê–ù–î–´ ==================
@router.message(CommandStart())
async def cmd_start(message: Message):
    if not ensure_allowed(message): return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb(message.from_user.id))

@router.message(Command("whoami"))
async def cmd_whoami(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    role = "OWNER" if uid == OWNER_ID else ("ADMIN" if is_admin(uid) else "USER")
    await message.answer(
        f"–¢—ã: <b>{role}</b>\n"
        f"–§–ò–û: <b>{fio(uid)}</b>\n"
        f"ID: <code>{uid}</code>",
        reply_markup=kb(uid)
    )

# ================== –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê ==================
@router.message(F.text == "–ù–∞—á–∞–ª üè≠")
async def handle_start(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    now = msk_now()
    shift = today_shift(uid)

    if shift.get("start") and shift.get("end") is None:
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—É—â—É—é.", reply_markup=kb(uid))
        return

    shift["start"] = now
    shift["end"] = None
    shift["start_reason"] = None
    shift["end_reason"] = None
    shift["comment"] = None

    if is_weekend(now.date()):
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:", reply_markup=kb(uid))
    elif now.time() < START_NORM:
        await message.answer("–†–∞–Ω—å—à–µ 08:00. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –Ω–∞—á–∞–ª–∞:", reply_markup=kb(uid))
    elif now.time() > START_OK_TILL:
        await message.answer("–ü–æ–∑–∂–µ 08:10. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:", reply_markup=kb(uid))
    else:
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!", reply_markup=kb(uid))

@router.message(F.text == "–ó–∞–∫–æ–Ω—á–∏–ª üè°")
async def handle_end(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    now = msk_now()
    shift = today_shift(uid)

    if not shift.get("start"):
        await message.answer("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=kb(uid))
        return
    if shift.get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=kb(uid))
        return

    shift["end"] = now

    if now.time() < END_NORM:
        await message.answer("–†–∞–Ω—å—à–µ 17:30. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=kb(uid))
    elif now.time() > END_OK_TILL:
        await message.answer("–ü–æ–∑–∂–µ 17:40. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=kb(uid))
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=kb(uid))

@router.message(F.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def handle_status(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    data = shifts_by_date.get(today_key(), {}).get(uid)
    if not data:
        await message.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=kb(uid))
        return
    await message.answer(
        f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤: {fmt_hm(data.get('start'))}\n"
        f"–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤: {fmt_hm(data.get('end'))}",
        reply_markup=kb(uid)
    )

@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def handle_help(message: Message):
    if not ensure_allowed(message): return
    await message.answer(
        "–ù–∞–∂–∏–º–∞–π ¬´–ù–∞—á–∞–ª üè≠¬ª –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∏ ¬´–ó–∞–∫–æ–Ω—á–∏–ª üè°¬ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é.\n"
        "–í –≤—ã—Ö–æ–¥–Ω—ã–µ/–ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —É–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
        reply_markup=kb(message.from_user.id)
    )

@router.message(F.text == "–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")
async def handle_shift_status(message: Message):
    if not ensure_allowed(message): return
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id))
        return

    day = today_key()
    day_data = shifts_by_date.get(day, {})
    if not day_data:
        await message.answer("–°–µ–≥–æ–¥–Ω—è —Å–º–µ–Ω –Ω–µ—Ç.", reply_markup=kb(message.from_user.id))
        return

    lines = []
    for uid, data in day_data.items():
        s = fmt_hm(data.get("start"))
        e = fmt_hm(data.get("end"))
        lines.append(f"{fio(uid)}: –Ω–∞—á–∞—Ç–∞ –≤ {s}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {e}")
    await message.answer("\n".join(lines), reply_markup=kb(message.from_user.id))

# ================== –û–¢–ß–Å–¢ –ü–û –î–ò–ê–ü–ê–ó–û–ù–£ (XLSX) ==================
class ReportStates(StatesGroup):
    waiting_period = State()

def daterange_inclusive(d1: datetime.date, d2: datetime.date) -> Iterable[datetime.date]:
    step = 1 if d1 <= d2 else -1
    cur = d1
    while True:
        yield cur
        if cur == d2:
            break
        cur = cur + datetime.timedelta(days=step)

def parse_date(s: str) -> datetime.date | None:
    try:
        y, m, d = s.split("-")
        return datetime.date(int(y), int(m), int(d))
    except Exception:
        return None

def calc_minutes(a: datetime.time, b: datetime.time) -> int:
    """b - a –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ–±–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏), –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º."""
    dt_a = datetime.datetime.combine(datetime.date.today(), a)
    dt_b = datetime.datetime.combine(datetime.date.today(), b)
    return int((dt_b - dt_a).total_seconds() // 60)

def deviation_columns(start_dt: datetime.datetime | None, end_dt: datetime.datetime | None) -> tuple[int,int,int,int]:
    """(—Ä–∞–Ω—å—à–µ_–Ω–∞—á–∞–ª–æ, –ø–æ–∑–∂–µ_–Ω–∞—á–∞–ª–æ, —Ä–∞–Ω—å—à–µ_–∫–æ–Ω–µ—Ü, –ø–æ–∑–∂–µ_–∫–æ–Ω–µ—Ü) –≤ –º–∏–Ω—É—Ç–∞—Ö (>=0)"""
    early_start = late_start = early_end = late_end = 0
    if start_dt:
        st_local = start_dt.astimezone(MSK).time()
        # —Ä–∞–Ω–Ω–µ–µ –Ω–∞—á–∞–ª–æ: —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ 08:00
        if st_local < START_NORM:
            early_start = calc_minutes(st_local, START_NORM) * -1  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ ‚Üí –≤ –ø–ª—é—Å
            early_start = max(0, early_start)
        # –ø–æ–∑–¥–Ω–µ–µ –Ω–∞—á–∞–ª–æ: —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ 08:10
        if st_local > START_OK_TILL:
            late_start = calc_minutes(START_OK_TILL, st_local)
            late_start = max(0, late_start)
    if end_dt:
        en_local = end_dt.astimezone(MSK).time()
        # —Ä–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ 17:30
        if en_local < END_NORM:
            early_end = calc_minutes(en_local, END_NORM) * -1
            early_end = max(0, early_end)
        # –ø–æ–∑–¥–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ 17:40
        if en_local > END_OK_TILL:
            late_end = calc_minutes(END_OK_TILL, en_local)
            late_end = max(0, late_end)
    return early_start, late_start, early_end, late_end

def minutes_between(start_dt: datetime.datetime | None, end_dt: datetime.datetime | None) -> int:
    if not start_dt or not end_dt:
        return 0
    a = start_dt.astimezone(MSK)
    b = end_dt.astimezone(MSK)
    if b < a:
        return 0
    return int((b - a).total_seconds() // 60)

def build_xlsx_bytes(date_from: datetime.date, date_to: datetime.date) -> bytes:
    wb = Workbook()
    ws_shifts = wb.active
    ws_shifts.title = "–°–º–µ–Ω—ã"
    ws_daily = wb.create_sheet("–°–≤–æ–¥ –ø–æ –¥–Ω—è–º")
    ws_emps = wb.create_sheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    ws_params = wb.create_sheet("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

    # ---- –®–∞–ø–∫–∏
    shifts_header = [
        "–î–∞—Ç–∞","–°–æ—Ç—Ä—É–¥–Ω–∏–∫","ID","–ù–∞—á–∞–ª–æ","–ö–æ–Ω–µ—Ü",
        "–†–∞–Ω–Ω–µ–µ –Ω–∞—á–∞–ª–æ, –º–∏–Ω","–ü–æ–∑–¥–Ω–µ–µ –Ω–∞—á–∞–ª–æ, –º–∏–Ω","–†–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –º–∏–Ω","–ü–æ–∑–¥–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –º–∏–Ω",
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–∏–Ω","–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á","–í—ã—Ö–æ–¥–Ω–æ–π","–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∞–ª–∞","–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    ]
    ws_shifts.append(shifts_header)

    daily_header = [
        "–î–∞—Ç–∞","–°–æ—Ç—Ä—É–¥–Ω–∏–∫","ID","–ù–∞—á–∞–ª–æ","–ö–æ–Ω–µ—Ü",
        "–†–∞–Ω–Ω–µ–µ –Ω–∞—á–∞–ª–æ, –º–∏–Ω","–ü–æ–∑–¥–Ω–µ–µ –Ω–∞—á–∞–ª–æ, –º–∏–Ω","–†–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –º–∏–Ω","–ü–æ–∑–¥–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –º–∏–Ω",
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–∏–Ω","–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á","–í—ã—Ö–æ–¥–Ω–æ–π"
    ]
    ws_daily.append(daily_header)

    ws_emps.append(["ID","–°–æ—Ç—Ä—É–¥–Ω–∏–∫"])
    for uid, name in sorted(EMPLOYEES.items()):
        ws_emps.append([uid, name])

    ws_params.append(["–ü–∞—Ä–∞–º–µ—Ç—Ä","–ó–Ω–∞—á–µ–Ω–∏–µ"])
    ws_params.append(["–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å","Europe/Moscow"])
    ws_params.append(["–ù–æ—Ä–º–∞ –Ω–∞—á–∞–ª–∞","08:00"])
    ws_params.append(["–î–æ–ø—É—Å—Ç–∏–º–æ –¥–æ (–Ω–∞—á–∞–ª–æ)","08:10"])
    ws_params.append(["–ù–æ—Ä–º–∞ –∫–æ–Ω—Ü–∞","17:30"])
    ws_params.append(["–î–æ–ø—É—Å—Ç–∏–º–æ –¥–æ (–∫–æ–Ω–µ—Ü)","17:40"])

    # ---- –î–∞–Ω–Ω—ã–µ
    # –°–æ–±–∏—Ä–∞–µ–º —Å–≤–æ–¥ —Å—Ä–∞–∑—É –ø–æ —Ö–æ–¥—É (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ –¥–µ–Ω—å)
    # –ó–¥–µ—Å—å —É –Ω–∞—Å –ø–æ –¥–∏–∑–∞–π–Ω—É –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–µ–Ω—å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    for day in daterange_inclusive(date_from, date_to):
        key = day.isoformat()
        day_data = shifts_by_date.get(key, {})
        weekend = "–î–∞" if is_weekend(day) else "–ù–µ—Ç"

        for uid, data in day_data.items():
            name = EMPLOYEES.get(uid, "")
            start_dt: datetime.datetime | None = data.get("start")
            end_dt:   datetime.datetime | None = data.get("end")

            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ú–°–ö –∏ —Ñ–æ—Ä–º–∞—Ç—ã
            start_str = fmt_hm(start_dt)
            end_str   = fmt_hm(end_dt)

            early_start, late_start, early_end, late_end = deviation_columns(start_dt, end_dt)
            work_min = minutes_between(start_dt, end_dt)
            work_hours = round(work_min/60, 2)

            ws_shifts.append([
                day, name, uid, start_str, end_str,
                early_start, late_start, early_end, late_end,
                work_min, work_hours, weekend,
                data.get("start_reason") or "",
                data.get("end_reason") or "",
                data.get("comment") or "",
            ])

            ws_daily.append([
                day, name, uid, start_str, end_str,
                early_start, late_start, early_end, late_end,
                work_min, work_hours, weekend
            ])

    # ---- –§–æ—Ä–º–∞—Ç—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∞—Å–æ—Ç—ã
    def fit_columns(ws):
        widths = {}
        for row in ws.iter_rows(values_only=True):
            for i, cell in enumerate(row, 1):
                s = "" if cell is None else str(cell)
                widths[i] = max(widths.get(i, 0), len(s))
        for i, w in widths.items():
            ws.column_dimensions[get_column_letter(i)].width = min(max(10, w + 2), 40)

    for ws in (ws_shifts, ws_daily, ws_emps, ws_params):
        fit_columns(ws)
        # —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in next(ws.iter_rows(min_row=1, max_row=1)):
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal="center")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    bio = io.BytesIO()
    wb.save(bio)
    return bio.getvalue()

# ======== FSM: –ø—Ä–æ—Å–∏–º –ø–µ—Ä–∏–æ–¥ —É –∞–¥–º–∏–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–û—Ç—á–µ—Ç üìà¬ª ========
@router.message(F.text == "–û—Ç—á–µ—Ç üìà")
async def ask_report_period(message: Message, state: FSMContext):
    if not ensure_allowed(message): return
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id))
        return
    await state.set_state(ReportStates.waiting_period)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–∞—Ç (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ –û–¥–∏–Ω –¥–µ–Ω—å: <code>2025-08-20</code>\n"
        "‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: <code>2025-08-01 2025-08-20</code>\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel"
    )

@router.message(Command("cancel"))
async def cancel_report(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb(message.from_user.id))

@router.message(ReportStates.waiting_period, F.text)
async def handle_report_period(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id))
        await state.clear()
        return

    parts = message.text.strip().split()
    if len(parts) == 1:
        d1 = parse_date(parts[0]); d2 = d1
    elif len(parts) == 2:
        d1 = parse_date(parts[0]); d2 = parse_date(parts[1])
    else:
        d1 = d2 = None

    if not d1 or not d2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>2025-08-01 2025-08-20</code> –∏–ª–∏ <code>2025-08-20</code>")
        return

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫
    if d2 < d1:
        d1, d2 = d2, d1

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    has_any = any(shifts_by_date.get(day.isoformat()) for day in daterange_inclusive(d1, d2))
    if not has_any:
        await message.answer("–í —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    try:
        xlsx = build_xlsx_bytes(d1, d2)
        fname = f"–û—Ç—á—ë—Ç_{d1.isoformat()}_{d2.isoformat()}.xlsx" if d1 != d2 else f"–û—Ç—á—ë—Ç_{d1.isoformat()}.xlsx"
        await message.answer_document(
            BufferedInputFile(xlsx, filename=fname),
            caption=f"–û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {d1.isoformat()} ‚Äî {d2.isoformat()} (–ú–°–ö).",
            reply_markup=kb(message.from_user.id)
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    finally:
        await state.clear()

# ================== –°–í–û–ë–û–î–ù–´–ô –¢–ï–ö–°–¢ (–ø—Ä–∏—á–∏–Ω—ã/–∫–æ–º–º–µ–Ω—Ç) ==================
@router.message()
async def handle_comment(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    data = shifts_by_date.get(today_key(), {}).get(uid)
    if not data:
        return
    txt = (message.text or "").strip()
    if not txt:
        return
    if data.get("start") and not data.get("end") and not data.get("comment"):
        data["comment"] = txt
        await message.answer("–°–ø–∞—Å–∏–±–æ! –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!", reply_markup=kb(uid))
    elif data.get("end") and not data.get("comment_done"):
        data["comment_done"] = True
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=kb(uid))

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    try:
        me = await bot.get_me()
        logging.info("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @%s (id=%s)", me.username, me.id)
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand(command="whoami", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ä–æ–ª—å"),
            BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞"),
        ])
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception("–°—Ç–∞—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: %s", e)
        await bot.session.close()
        raise

if __name__ == "__main__":
    asyncio.run(main())
