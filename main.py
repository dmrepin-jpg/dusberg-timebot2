# main.py  (aiogram >= 3.7,<3.9)
import io
import csv
import asyncio
import logging
import datetime
import calendar
from collections import defaultdict
from typing import Dict, Any

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, KeyboardButton, Message, ReplyKeyboardMarkup, BufferedInputFile
from zoneinfo import ZoneInfo

# ================== –ñ–Å–°–¢–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = "8396016774:AAE09_ALathLnzkKHQf7AqbPL4_m39wgBlY"   # <‚Äî –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù
OWNER_ID  = 104653853
ADMIN_IDS = [104653853, 1155243378]

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: –¢–û–õ–¨–ö–û —ç—Ç–∏ –ª—é–¥–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø.
# –§–ò–û –±–µ—Ä—ë–º –¢–û–õ–¨–ö–û –æ—Ç—Å—é–¥–∞ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º-–Ω–∏–∫–æ–≤.
EMPLOYEES: Dict[int, str] = {
    104653853: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
    1155243378: "–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á",
    # ...–¥–æ–±–∞–≤–ª—è–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: id: "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ",
}

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
ALLOWED_IDS = set(EMPLOYEES.keys()) | {OWNER_ID, *ADMIN_IDS}

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤–∞
MSK = ZoneInfo("Europe/Moscow")

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# ================== –ö–ù–û–ü–ö–ò ==================
user_buttons = [
    [KeyboardButton(text="–ù–∞—á–∞–ª üè≠"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–ª üè°")],
    [KeyboardButton(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
]
admin_buttons = user_buttons + [[KeyboardButton(text="–û—Ç—á–µ—Ç üìà"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")]]

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

def kb(uid: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=admin_buttons if is_admin(uid) else user_buttons,
        resize_keyboard=True
    )

# ================== –î–ê–ù–ù–´–ï (–ü–û –î–ù–Ø–ú) ==================
# –•—Ä–∞–Ω–∏–º ¬´—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ¬ª —Å–º–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–ª—é—á—É –¥–∞—Ç—ã (–ú–°–ö)
# shifts_by_date["YYYY-MM-DD"][user_id] = {...}
shifts_by_date: Dict[str, Dict[int, Dict[str, Any]]] = defaultdict(dict)

# ================== –£–¢–ò–õ–ò–¢–´ –í–†–ï–ú–ï–ù–ò ==================
def msk_now() -> datetime.datetime:
    return datetime.datetime.now(MSK)

def today_key() -> str:
    return msk_now().date().isoformat()  # 'YYYY-MM-DD' –ø–æ –ú–°–ö

def fmt_hm(dt: datetime.datetime | None) -> str:
    if not dt:
        return "‚Äî"
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=MSK)
    return dt.astimezone(MSK).strftime("%H:%M")

def fmt_date(dt: datetime.datetime | None) -> str:
    if not dt:
        return ""
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=MSK)
    return dt.astimezone(MSK).strftime("%Y-%m-%d")

def is_weekend(date: datetime.date) -> bool:
    return calendar.weekday(date.year, date.month, date.day) >= 5

# ================== –ò–ú–ï–ù–ê –¢–û–õ–¨–ö–û –ò–ó –°–ü–†–ê–í–û–ß–ù–ò–ö–ê ==================
def fio(uid: int) -> str:
    """–§–ò–û —Ç–æ–ª—å–∫–æ –∏–∑ EMPLOYEES. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π (ID)'."""
    return EMPLOYEES.get(uid, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({uid})")

# ================== –î–û–°–¢–£–ü ==================
def ensure_allowed(message: Message) -> bool:
    uid = message.from_user.id
    if uid not in ALLOWED_IDS:
        asyncio.create_task(message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."))
        return False
    return True

# ================== –ö–û–ú–ê–ù–î–´ ==================
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    if not ensure_allowed(message): return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb(message.from_user.id))

@router.message(F.text == "/whoami")
async def cmd_whoami(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    role = "OWNER" if uid == OWNER_ID else ("ADMIN" if is_admin(uid) else "USER")
    await message.answer(
        f"–¢—ã: <b>{role}</b>\n"
        f"–§–ò–û: <b>{fio(uid)}</b>\n"
        f"ID: <code>{uid}</code>",
        reply_markup=kb(uid)
    )

# ================== –ë–ò–ó–ù–ï–°-–•–ï–ù–î–õ–ï–†–´ (–°–ï–ì–û–î–ù–Ø, –ú–°–ö) ==================
def today_shift(uid: int) -> Dict[str, Any]:
    return shifts_by_date[today_key()].setdefault(uid, {})

@router.message(F.text == "–ù–∞—á–∞–ª üè≠")
async def handle_start(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    now = msk_now()
    shift = today_shift(uid)

    if shift.get("start") and shift.get("end") is None:
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—É—â—É—é.", reply_markup=kb(uid))
        return

    shift["start"] = now
    shift["end"] = None
    shift["start_reason"] = None
    shift["end_reason"] = None
    shift["comment"] = None

    if is_weekend(now.date()):
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:", reply_markup=kb(uid))
    elif now.time() < datetime.time(8, 0):
        await message.answer("–†–∞–Ω—å—à–µ 08:00. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –Ω–∞—á–∞–ª–∞:", reply_markup=kb(uid))
    elif now.time() > datetime.time(8, 10):
        await message.answer("–ü–æ–∑–∂–µ 08:10. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:", reply_markup=kb(uid))
    else:
        await message.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!", reply_markup=kb(uid))

@router.message(F.text == "–ó–∞–∫–æ–Ω—á–∏–ª üè°")
async def handle_end(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    now = msk_now()
    shift = today_shift(uid)

    if not shift.get("start"):
        await message.answer("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=kb(uid))
        return
    if shift.get("end"):
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=kb(uid))
        return

    shift["end"] = now

    if now.time() < datetime.time(17, 30):
        await message.answer("–†–∞–Ω—å—à–µ 17:30. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=kb(uid))
    elif now.time() > datetime.time(17, 40):
        await message.answer("–ü–æ–∑–∂–µ –Ω–æ—Ä–º—ã. –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=kb(uid))
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=kb(uid))

@router.message(F.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def handle_status(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    data = shifts_by_date.get(today_key(), {}).get(uid)
    if not data:
        await message.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=kb(uid))
        return
    await message.answer(
        f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤: {fmt_hm(data.get('start'))}\n"
        f"–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤: {fmt_hm(data.get('end'))}",
        reply_markup=kb(uid)
    )

@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def handle_help(message: Message):
    if not ensure_allowed(message): return
    await message.answer(
        "–ù–∞–∂–∏–º–∞–π ¬´–ù–∞—á–∞–ª üè≠¬ª –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∏ ¬´–ó–∞–∫–æ–Ω—á–∏–ª üè°¬ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é.\n"
        "–í –≤—ã—Ö–æ–¥–Ω—ã–µ/–ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
        reply_markup=kb(message.from_user.id)
    )

@router.message(F.text == "–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã")
async def handle_shift_status(message: Message):
    if not ensure_allowed(message): return
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id))
        return

    day = today_key()
    day_data = shifts_by_date.get(day, {})
    if not day_data:
        await message.answer("–°–µ–≥–æ–¥–Ω—è —Å–º–µ–Ω –Ω–µ—Ç.", reply_markup=kb(message.from_user.id))
        return

    lines = []
    for uid, data in day_data.items():
        s = fmt_hm(data.get("start"))
        e = fmt_hm(data.get("end"))
        # –¢–û–õ–¨–ö–û –§–ò–û –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞:
        lines.append(f"{fio(uid)}: –Ω–∞—á–∞—Ç–∞ –≤ {s}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {e}")
    await message.answer("\n".join(lines), reply_markup=kb(message.from_user.id))

# ================== –û–¢–ß–Å–¢ (CSV –∑–∞ —Å–µ–≥–æ–¥–Ω—è) ==================
def build_csv_today_bytes() -> bytes:
    """
    CSV UTF-8-SIG; —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (MSK).
    –ö–æ–ª–æ–Ω–∫–∏: Date;Name;ID;Start;End;Duration(h);Weekend;StartReason;EndReason;Comment
    """
    out = io.StringIO()
    w = csv.writer(out, delimiter=';', lineterminator='\n')
    w.writerow(["Date", "Name", "ID", "Start", "End", "Duration(h)", "Weekend", "StartReason", "EndReason", "Comment"])

    day = today_key()
    day_data = shifts_by_date.get(day, {})
    # weekend –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ:
    weekend = "yes" if is_weekend(msk_now().date()) else "no"

    for uid, data in day_data.items():
        start: datetime.datetime | None = data.get("start")
        end:   datetime.datetime | None = data.get("end")

        if start and start.tzinfo is None: start = start.replace(tzinfo=MSK)
        if end and end.tzinfo is None:     end   = end.replace(tzinfo=MSK)

        start_str = fmt_hm(start)
        end_str   = fmt_hm(end)

        duration_h = ""
        if start and end:
            delta = end.astimezone(MSK) - start.astimezone(MSK)
            duration_h = f"{round(delta.total_seconds()/3600, 2)}"

        w.writerow([
            day, EMPLOYEES.get(uid, ""), uid, start_str, end_str, duration_h, weekend,
            data.get("start_reason") or "", data.get("end_reason") or "", data.get("comment") or ""
        ])

    return out.getvalue().encode("utf-8-sig")

@router.message(F.text == "–û—Ç—á–µ—Ç üìà")
async def handle_report_button(message: Message):
    if not ensure_allowed(message): return
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb(message.from_user.id))
        return
    day_data = shifts_by_date.get(today_key(), {})
    if not day_data:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ –Ω–µ—Ç.", reply_markup=kb(message.from_user.id))
        return
    csv_bytes = build_csv_today_bytes()
    fname = f"report_{today_key()}_{msk_now().strftime('%H%M')}.csv"
    file = BufferedInputFile(csv_bytes, filename=fname)
    await message.answer_document(file, caption="–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è (MSK).", reply_markup=kb(message.from_user.id))

@router.message(F.text == "/export")
async def handle_export_cmd(message: Message):
    if not ensure_allowed(message): return
    await handle_report_button(message)

# ================== –°–í–û–ë–û–î–ù–´–ô –¢–ï–ö–°–¢ (–ø—Ä–∏—á–∏–Ω—ã/–∫–æ–º–º–µ–Ω—Ç) ==================
@router.message()
async def handle_comment(message: Message):
    if not ensure_allowed(message): return
    uid = message.from_user.id
    data = shifts_by_date.get(today_key(), {}).get(uid)
    if not data:
        return
    txt = (message.text or "").strip()
    if not txt:
        return
    if data.get("start") and not data.get("end") and not data.get("comment"):
        data["comment"] = txt
        await message.answer("–°–ø–∞—Å–∏–±–æ! –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!", reply_markup=kb(uid))
    elif data.get("end") and not data.get("comment_done"):
        data["comment_done"] = True
        await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=kb(uid))

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="whoami", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ä–æ–ª—å"),
        BotCommand(command="export", description="–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ CSV (–∞–¥–º–∏–Ω)"),
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
