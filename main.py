import asyncio
import logging
import os
import json
from datetime import datetime, time
import pytz
import pandas as pd
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types.input_file import FSInputFile
from aiogram.exceptions import TelegramBadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '8369016774:AAE09_ALathLnzKdHQF7qAbpL4_mJ9wg8IY'
ADMIN_IDS = [104653853]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

data = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global data
    try:
        with open("data.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}

def save_data():
    with open("data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, default=str)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
def within_working_hours():
    now = datetime.now(pytz.timezone("Europe/Moscow")).time()
    return time(8, 0) <= now <= time(17, 30)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard(is_admin=False):
    buttons = [
        [KeyboardButton(text="–ù–∞—á–∞–ª üè≠"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏–ª üè°")],
        [KeyboardButton(text="–ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="–°—Ç–∞—Ç—É—Åüìç"), KeyboardButton(text="–û—Ç—á–µ—Ç üìà")])
        buttons.append([KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# Telegram-–æ–±—ä–µ–∫—Ç—ã
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    load_data()
    keyboard = get_keyboard(is_admin(message.from_user.id))
    await message.answer("–ñ–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!", reply_markup=keyboard)

# –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã
@dp.message(F.text == "–ù–∞—á–∞–ª üè≠")
async def start_shift(message: Message):
    user_id = str(message.from_user.id)
    now = datetime.now(pytz.timezone("Europe/Moscow"))

    if not within_working_hours():
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –°–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Å 08:00 –¥–æ 17:30 –ø–æ –ú–°–ö.")
        return

    if user_id in data and "start" in data[user_id]:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–º–µ–Ω—É.")
        return

    data[user_id] = {
        "name": message.from_user.full_name,
        "start": now.isoformat()
    }
    save_data()
    await message.answer("–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
@dp.message(F.text == "–ó–∞–∫–æ–Ω—á–∏–ª üè°")
async def end_shift(message: Message):
    user_id = str(message.from_user.id)
    now = datetime.now(pytz.timezone("Europe/Moscow"))

    if user_id not in data or "start" not in data[user_id]:
        await message.answer("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å.")
        return

    if "end" in data[user_id]:
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    data[user_id]["end"] = now.isoformat()
    save_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ñ–µ–ª–∞—é —Ç–æ—á–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!")

# –ú–æ–π —Å—Ç–∞—Ç—É—Å
@dp.message(F.text == "–ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def my_status(message: Message):
    user_id = str(message.from_user.id)
    record = data.get(user_id)
    if not record:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ —Å–º–µ–Ω—É.")
    elif "end" in record:
        await message.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        await message.answer("–í—ã –Ω–∞ —Å–º–µ–Ω–µ.")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
@dp.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def show_instruction(message: Message):
    await message.answer(
        "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
        "–ù–∞—á–∞–ª üè≠ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã\n"
        "–ó–∞–∫–æ–Ω—á–∏–ª üè° ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã\n"
        "–ú–æ–π —Å—Ç–∞—Ç—É—Å ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:\n"
        "–°—Ç–∞—Ç—É—Åüìç ‚Äî –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Å–º–µ–Ω–µ\n"
        "–û—Ç—á–µ—Ç üìà ‚Äî Excel-—Ñ–∞–π–ª —Å–º–µ–Ω\n"
        "–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏"
    )

# –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@dp.message(F.text == "–°—Ç–∞—Ç—É—Åüìç")
async def admin_status(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    text = []
    for user_id, entry in data.items():
        name = entry.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if "end" in entry:
            status = "–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        elif "start" in entry:
            dt = datetime.fromisoformat(entry["start"]).strftime("%H:%M")
            status = f"–ù–∞ —Å–º–µ–Ω–µ —Å {dt}"
        else:
            status = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        text.append(f"{name}: {status}")

    await message.answer("\n".join(text) if text else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")

# –û—Ç—á—ë—Ç –≤ Excel
@dp.message(F.text == "–û—Ç—á–µ—Ç üìà")
async def send_report(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    rows = []
    for entry in data.values():
        rows.append({
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": entry.get("name", ""),
            "–ù–∞—á–∞–ª–æ": entry.get("start", ""),
            "–û–∫–æ–Ω—á–∞–Ω–∏–µ": entry.get("end", "")
        })

    df = pd.DataFrame(rows)
    filename = "report.xlsx"
    df.to_excel(filename, index=False)

    try:
        await bot.send_document(message.chat.id, FSInputFile(filename))
    except TelegramBadRequest as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    finally:
        if os.path.exists(filename):
            os.remove(filename)

# –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
@dp.message(F.text == "–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def reset_data(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    global data
    data = {}
    save_data()
    await message.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message()
async def unknown_command(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    load_data()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
